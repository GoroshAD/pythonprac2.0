From 10005011fc95516392a9f0f4c571eaa3045a7d2f Mon Sep 17 00:00:00 2001
From: Franky <nikto8748@gmail.com>
Date: Fri, 22 Mar 2024 20:23:19 +0300
Subject: [PATCH 5/8] Fixed client, added move + encounter to server.

---
 20240318/1/clie.py | 14 ++++-----
 20240318/1/serv.py | 71 ++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 78 insertions(+), 7 deletions(-)

diff --git a/20240318/1/clie.py b/20240318/1/clie.py
index 82675ca..c918b91 100644
--- a/20240318/1/clie.py
+++ b/20240318/1/clie.py
@@ -27,19 +27,19 @@ def move_func(args, dest):
         return
     match dest:
         case "up":
-            self.socket.sendall((" ".join(["move", "0", "-1"])).encode())
+            self.socket.sendall((f"move {0} {-1}").encode())
         case "down":
-            self.socket.sendall((" ".join(["move", "0", "1"])).encode())
+            self.socket.sendall((f"move {0} {1}").encode())
         case "left":
-            self.socket.sendall((" ".join(["move", "-1", "0"])).encode())
+            self.socket.sendall((f"move {-1} {0}").encode())
         case "right":
-            self.socket.sendall((" ".join(["move", "1", "0"])).encode())
+            self.socket.sendall((f"move {1} {0}").encode())
         case _:
             print("Invalid arguments")
             return
     answer = shlex.split(self.s.recv(1024).rstrip().decode())
     print(f"Moved to {(answer[0], answer[1])}")
-    if len(answer) == 4:
+    if answer[2] is not None:
         if answer[2] == "jgsbat":
         print(cowsay(answer[3], cowfile=read_dot_cow(JGSBAT)))
     else:
@@ -80,7 +80,7 @@ def addmon_func(args):
     if name not in list_cows() and name != "jgsbat":
         print("Cannot add unknown monster")
         return
-    self.socket.sendall((f"{name} {x} {y} {hello} {hp}")).encode())
+    self.socket.sendall((f"addmon {name} {x} {y} {hello} {hp}")).encode())
     answer = shlex.split(self.s.recv(1024).rstrip().decode())
     print(f"Added monster {name} to {(x, y)} saying {phrase}")
     if answer[0]:
@@ -106,7 +106,7 @@ def attack_func(args):
         print("Unknown weapon")
         return
     damage = weapons[weapon]
-    self.socket.sendall((f"{monster_name} {damage}")).encode())
+    self.socket.sendall((f"attack {monster_name} {damage}")).encode())
     answer = shlex.split(self.s.recv(1024).rstrip().decode())
     if not answer[0]:
         print(f"No {monster_name} here")
diff --git a/20240318/1/serv.py b/20240318/1/serv.py
index e69de29..6338447 100644
--- a/20240318/1/serv.py
+++ b/20240318/1/serv.py
@@ -0,0 +1,71 @@
+import multiprocessing, shlex, sys, socket
+
+#Constants and dictionaries.
+
+host = "localhost" if len(sys.argv) < 2 else sys.argv[1]
+port = 1337 if len(sys.argv) < 3 else int(sys.argv[2])
+field = {}
+
+#Necessary classes.
+
+class Monster:
+    name = ""
+    x = 0
+    y = 0
+    phrase = ""
+    hp = 0
+    def __init__(self, name, x, y, phrase, hp):
+        self.phrase = phrase
+        self.x = x
+        self.y = y
+        self.name = name
+        self.hp = hp
+
+class Player:
+    x = 0
+    y = 0
+
+class Cell:
+    monster = None
+    player = False
+
+#Loading game map.
+
+for i in range(10):
+    for j in range(10):
+        field[(i, j)] = Cell()
+field[(0, 0)].player = True
+player = Player()
+
+#Game functions.
+
+def serve(conn, addr):
+    with conn:
+        print('Connected by', addr)
+        while data := conn.recv(1024):
+            inf = shlex.split(data.decode())
+            match inf[0]:
+                case "move":
+                    field[(player.x, player.y)].player = False
+                    player.x = (player.x + inf[1]) % 10
+                    player.y = (player.y + inf[2]) % 10
+                    field[(player.x, player.y)].player = True
+                    monster_name, monster_phrase = None, None
+                    if field[(player.x, player.y)].monster is not None:
+                        monster_name = field[(player.x, player.y)].monster.name
+                        monster_phrase = field[(player.x, player.y)].monster.phrase
+                    conn.sendall(f"{player.x} {player.y} {monster_name} {monster_phrase}").encode())
+                case "addmon":
+                    conn.sendall(str(addr[0]).encode() if inf[1] == "host" else str(addr[1]).encode())
+                case "attack":
+
+                case _:
+                    pass
+
+with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
+    s.bind((host, port))
+    s.listen()
+    while True:
+        conn, addr = s.accept()
+        multiprocessing.Process(target=serve, args=(conn, addr)).start()
+    s.close()
-- 
2.34.1

